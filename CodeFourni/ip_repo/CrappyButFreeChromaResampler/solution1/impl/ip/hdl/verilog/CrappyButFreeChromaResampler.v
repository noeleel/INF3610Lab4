// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.2
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="CrappyButFreeChromaResampler,hls_ip_2017_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=6.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=5.223333,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=255,HLS_SYN_LUT=448}" *)

module CrappyButFreeChromaResampler (
        ap_clk,
        ap_rst_n,
        video_in_TDATA,
        video_in_TVALID,
        video_in_TREADY,
        video_in_TKEEP,
        video_in_TSTRB,
        video_in_TUSER,
        video_in_TLAST,
        video_out_TDATA,
        video_out_TVALID,
        video_out_TREADY,
        video_out_TKEEP,
        video_out_TSTRB,
        video_out_TUSER,
        video_out_TLAST
);

parameter    ap_ST_fsm_state1 = 4'd1;
parameter    ap_ST_fsm_state2 = 4'd2;
parameter    ap_ST_fsm_pp0_stage0 = 4'd4;
parameter    ap_ST_fsm_state6 = 4'd8;

input   ap_clk;
input   ap_rst_n;
input  [23:0] video_in_TDATA;
input   video_in_TVALID;
output   video_in_TREADY;
input  [2:0] video_in_TKEEP;
input  [2:0] video_in_TSTRB;
input  [0:0] video_in_TUSER;
input  [0:0] video_in_TLAST;
output  [15:0] video_out_TDATA;
output   video_out_TVALID;
input   video_out_TREADY;
output  [1:0] video_out_TKEEP;
output  [1:0] video_out_TSTRB;
output  [0:0] video_out_TUSER;
output  [0:0] video_out_TLAST;

reg    ap_rst_n_inv;
reg   [23:0] video_in_V_data_V_0_data_out;
wire    video_in_V_data_V_0_vld_in;
wire    video_in_V_data_V_0_vld_out;
wire    video_in_V_data_V_0_ack_in;
reg    video_in_V_data_V_0_ack_out;
reg   [23:0] video_in_V_data_V_0_payload_A;
reg   [23:0] video_in_V_data_V_0_payload_B;
reg    video_in_V_data_V_0_sel_rd;
reg    video_in_V_data_V_0_sel_wr;
wire    video_in_V_data_V_0_sel;
wire    video_in_V_data_V_0_load_A;
wire    video_in_V_data_V_0_load_B;
reg   [1:0] video_in_V_data_V_0_state;
wire    video_in_V_data_V_0_state_cmp_full;
reg   [2:0] video_in_V_keep_V_0_data_out;
wire    video_in_V_keep_V_0_vld_in;
wire    video_in_V_keep_V_0_vld_out;
wire    video_in_V_keep_V_0_ack_in;
reg    video_in_V_keep_V_0_ack_out;
reg   [2:0] video_in_V_keep_V_0_payload_A;
reg   [2:0] video_in_V_keep_V_0_payload_B;
reg    video_in_V_keep_V_0_sel_rd;
reg    video_in_V_keep_V_0_sel_wr;
wire    video_in_V_keep_V_0_sel;
wire    video_in_V_keep_V_0_load_A;
wire    video_in_V_keep_V_0_load_B;
reg   [1:0] video_in_V_keep_V_0_state;
wire    video_in_V_keep_V_0_state_cmp_full;
reg   [2:0] video_in_V_strb_V_0_data_out;
wire    video_in_V_strb_V_0_vld_in;
wire    video_in_V_strb_V_0_vld_out;
wire    video_in_V_strb_V_0_ack_in;
reg    video_in_V_strb_V_0_ack_out;
reg   [2:0] video_in_V_strb_V_0_payload_A;
reg   [2:0] video_in_V_strb_V_0_payload_B;
reg    video_in_V_strb_V_0_sel_rd;
reg    video_in_V_strb_V_0_sel_wr;
wire    video_in_V_strb_V_0_sel;
wire    video_in_V_strb_V_0_load_A;
wire    video_in_V_strb_V_0_load_B;
reg   [1:0] video_in_V_strb_V_0_state;
wire    video_in_V_strb_V_0_state_cmp_full;
reg   [0:0] video_in_V_user_V_0_data_out;
wire    video_in_V_user_V_0_vld_in;
wire    video_in_V_user_V_0_vld_out;
wire    video_in_V_user_V_0_ack_in;
reg    video_in_V_user_V_0_ack_out;
reg   [0:0] video_in_V_user_V_0_payload_A;
reg   [0:0] video_in_V_user_V_0_payload_B;
reg    video_in_V_user_V_0_sel_rd;
reg    video_in_V_user_V_0_sel_wr;
wire    video_in_V_user_V_0_sel;
wire    video_in_V_user_V_0_load_A;
wire    video_in_V_user_V_0_load_B;
reg   [1:0] video_in_V_user_V_0_state;
wire    video_in_V_user_V_0_state_cmp_full;
reg   [0:0] video_in_V_last_V_0_data_out;
wire    video_in_V_last_V_0_vld_in;
wire    video_in_V_last_V_0_vld_out;
wire    video_in_V_last_V_0_ack_in;
reg    video_in_V_last_V_0_ack_out;
reg   [0:0] video_in_V_last_V_0_payload_A;
reg   [0:0] video_in_V_last_V_0_payload_B;
reg    video_in_V_last_V_0_sel_rd;
reg    video_in_V_last_V_0_sel_wr;
wire    video_in_V_last_V_0_sel;
wire    video_in_V_last_V_0_load_A;
wire    video_in_V_last_V_0_load_B;
reg   [1:0] video_in_V_last_V_0_state;
wire    video_in_V_last_V_0_state_cmp_full;
reg   [15:0] video_out_V_data_V_1_data_out;
reg    video_out_V_data_V_1_vld_in;
wire    video_out_V_data_V_1_vld_out;
wire    video_out_V_data_V_1_ack_in;
wire    video_out_V_data_V_1_ack_out;
reg   [15:0] video_out_V_data_V_1_payload_A;
reg   [15:0] video_out_V_data_V_1_payload_B;
reg    video_out_V_data_V_1_sel_rd;
reg    video_out_V_data_V_1_sel_wr;
wire    video_out_V_data_V_1_sel;
wire    video_out_V_data_V_1_load_A;
wire    video_out_V_data_V_1_load_B;
reg   [1:0] video_out_V_data_V_1_state;
wire    video_out_V_data_V_1_state_cmp_full;
reg   [1:0] video_out_V_keep_V_1_data_out;
reg    video_out_V_keep_V_1_vld_in;
wire    video_out_V_keep_V_1_vld_out;
wire    video_out_V_keep_V_1_ack_in;
wire    video_out_V_keep_V_1_ack_out;
reg   [1:0] video_out_V_keep_V_1_payload_A;
reg   [1:0] video_out_V_keep_V_1_payload_B;
reg    video_out_V_keep_V_1_sel_rd;
reg    video_out_V_keep_V_1_sel_wr;
wire    video_out_V_keep_V_1_sel;
wire    video_out_V_keep_V_1_load_A;
wire    video_out_V_keep_V_1_load_B;
reg   [1:0] video_out_V_keep_V_1_state;
wire    video_out_V_keep_V_1_state_cmp_full;
reg   [1:0] video_out_V_strb_V_1_data_out;
reg    video_out_V_strb_V_1_vld_in;
wire    video_out_V_strb_V_1_vld_out;
wire    video_out_V_strb_V_1_ack_in;
wire    video_out_V_strb_V_1_ack_out;
reg   [1:0] video_out_V_strb_V_1_payload_A;
reg   [1:0] video_out_V_strb_V_1_payload_B;
reg    video_out_V_strb_V_1_sel_rd;
reg    video_out_V_strb_V_1_sel_wr;
wire    video_out_V_strb_V_1_sel;
wire    video_out_V_strb_V_1_load_A;
wire    video_out_V_strb_V_1_load_B;
reg   [1:0] video_out_V_strb_V_1_state;
wire    video_out_V_strb_V_1_state_cmp_full;
reg   [0:0] video_out_V_user_V_1_data_out;
reg    video_out_V_user_V_1_vld_in;
wire    video_out_V_user_V_1_vld_out;
wire    video_out_V_user_V_1_ack_in;
wire    video_out_V_user_V_1_ack_out;
reg   [0:0] video_out_V_user_V_1_payload_A;
reg   [0:0] video_out_V_user_V_1_payload_B;
reg    video_out_V_user_V_1_sel_rd;
reg    video_out_V_user_V_1_sel_wr;
wire    video_out_V_user_V_1_sel;
wire    video_out_V_user_V_1_load_A;
wire    video_out_V_user_V_1_load_B;
reg   [1:0] video_out_V_user_V_1_state;
wire    video_out_V_user_V_1_state_cmp_full;
reg   [0:0] video_out_V_last_V_1_data_out;
reg    video_out_V_last_V_1_vld_in;
wire    video_out_V_last_V_1_vld_out;
wire    video_out_V_last_V_1_ack_in;
wire    video_out_V_last_V_1_ack_out;
reg   [0:0] video_out_V_last_V_1_payload_A;
reg   [0:0] video_out_V_last_V_1_payload_B;
reg    video_out_V_last_V_1_sel_rd;
reg    video_out_V_last_V_1_sel_wr;
wire    video_out_V_last_V_1_sel;
wire    video_out_V_last_V_1_load_A;
wire    video_out_V_last_V_1_load_B;
reg   [1:0] video_out_V_last_V_1_state;
wire    video_out_V_last_V_1_state_cmp_full;
reg    video_in_TDATA_blk_n;
(* fsm_encoding = "none" *) reg   [3:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
wire    ap_block_pp0_stage0_flag00000000;
reg   [0:0] exitcond_reg_237;
reg    video_out_TDATA_blk_n;
reg    ap_enable_reg_pp0_iter2;
reg   [0:0] ap_reg_pp0_iter1_exitcond_reg_237;
reg   [20:0] i_reg_117;
wire   [0:0] exitcond_fu_133_p2;
wire    ap_block_state3_pp0_stage0_iter0;
reg    ap_block_state4_pp0_stage0_iter1;
reg    ap_block_state4_io;
wire    ap_block_state5_pp0_stage0_iter2;
reg    ap_block_state5_io;
reg    ap_block_pp0_stage0_flag00011001;
wire   [20:0] i_1_fu_139_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [0:0] tmp_fu_145_p1;
reg   [0:0] tmp_reg_246;
wire   [15:0] pixOut_3_fu_207_p3;
wire   [1:0] tmp_keep_V_1_fu_215_p1;
wire   [1:0] tmp_strb_V_1_fu_220_p1;
wire    ap_CS_fsm_state2;
reg    ap_block_pp0_stage0_flag00011011;
reg    ap_condition_pp0_exit_iter0_state3;
reg   [7:0] leftover_V_fu_80;
wire    ap_CS_fsm_state1;
wire   [7:0] leftover_V_1_fu_200_p3;
reg    ap_block_pp0_stage0_flag00001001;
wire   [7:0] Y_V_fu_174_p1;
wire   [7:0] Cr_V_fu_178_p4;
wire   [15:0] pixOut_1_fu_192_p3;
wire   [15:0] pixOut_fu_188_p1;
reg   [3:0] ap_NS_fsm;
reg    ap_idle_pp0;
wire    ap_enable_pp0;

// power-on initialization
initial begin
#0 video_in_V_data_V_0_sel_rd = 1'b0;
#0 video_in_V_data_V_0_sel_wr = 1'b0;
#0 video_in_V_data_V_0_state = 2'd0;
#0 video_in_V_keep_V_0_sel_rd = 1'b0;
#0 video_in_V_keep_V_0_sel_wr = 1'b0;
#0 video_in_V_keep_V_0_state = 2'd0;
#0 video_in_V_strb_V_0_sel_rd = 1'b0;
#0 video_in_V_strb_V_0_sel_wr = 1'b0;
#0 video_in_V_strb_V_0_state = 2'd0;
#0 video_in_V_user_V_0_sel_rd = 1'b0;
#0 video_in_V_user_V_0_sel_wr = 1'b0;
#0 video_in_V_user_V_0_state = 2'd0;
#0 video_in_V_last_V_0_sel_rd = 1'b0;
#0 video_in_V_last_V_0_sel_wr = 1'b0;
#0 video_in_V_last_V_0_state = 2'd0;
#0 video_out_V_data_V_1_sel_rd = 1'b0;
#0 video_out_V_data_V_1_sel_wr = 1'b0;
#0 video_out_V_data_V_1_state = 2'd0;
#0 video_out_V_keep_V_1_sel_rd = 1'b0;
#0 video_out_V_keep_V_1_sel_wr = 1'b0;
#0 video_out_V_keep_V_1_state = 2'd0;
#0 video_out_V_strb_V_1_sel_rd = 1'b0;
#0 video_out_V_strb_V_1_sel_wr = 1'b0;
#0 video_out_V_strb_V_1_state = 2'd0;
#0 video_out_V_user_V_1_sel_rd = 1'b0;
#0 video_out_V_user_V_1_sel_wr = 1'b0;
#0 video_out_V_user_V_1_state = 2'd0;
#0 video_out_V_last_V_1_sel_rd = 1'b0;
#0 video_out_V_last_V_1_sel_wr = 1'b0;
#0 video_out_V_last_V_1_state = 2'd0;
#0 ap_CS_fsm = 4'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'b1 == ap_condition_pp0_exit_iter0_state3))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            if ((1'b1 == ap_condition_pp0_exit_iter0_state3)) begin
                ap_enable_reg_pp0_iter1 <= (ap_condition_pp0_exit_iter0_state3 ^ 1'b1);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((ap_block_pp0_stage0_flag00011011 == 1'b0)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end else if ((1'b1 == ap_CS_fsm_state2)) begin
            ap_enable_reg_pp0_iter2 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_data_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_data_V_0_ack_out) & (1'b1 == video_in_V_data_V_0_vld_out))) begin
            video_in_V_data_V_0_sel_rd <= ~video_in_V_data_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_data_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_data_V_0_vld_in) & (1'b1 == video_in_V_data_V_0_ack_in))) begin
            video_in_V_data_V_0_sel_wr <= ~video_in_V_data_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_data_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_in_V_data_V_0_vld_in) & (1'b1 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == 2'd3)) | ((1'b0 == video_in_V_data_V_0_vld_in) & (video_in_V_data_V_0_state == 2'd2)))) begin
            video_in_V_data_V_0_state <= 2'd2;
        end else if ((((1'b1 == video_in_V_data_V_0_vld_in) & (1'b0 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == 2'd3)) | ((1'b0 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == 2'd1)))) begin
            video_in_V_data_V_0_state <= 2'd1;
        end else if ((((1'b1 == video_in_V_data_V_0_vld_in) & (video_in_V_data_V_0_state == 2'd2)) | ((1'b1 == video_in_V_data_V_0_ack_out) & (video_in_V_data_V_0_state == 2'd1)) | ((video_in_V_data_V_0_state == 2'd3) & ~((1'b1 == video_in_V_data_V_0_vld_in) & (1'b0 == video_in_V_data_V_0_ack_out)) & ~((1'b0 == video_in_V_data_V_0_vld_in) & (1'b1 == video_in_V_data_V_0_ack_out))))) begin
            video_in_V_data_V_0_state <= 2'd3;
        end else begin
            video_in_V_data_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_keep_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_keep_V_0_ack_out) & (1'b1 == video_in_V_keep_V_0_vld_out))) begin
            video_in_V_keep_V_0_sel_rd <= ~video_in_V_keep_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_keep_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_keep_V_0_vld_in) & (1'b1 == video_in_V_keep_V_0_ack_in))) begin
            video_in_V_keep_V_0_sel_wr <= ~video_in_V_keep_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_keep_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_in_V_keep_V_0_vld_in) & (1'b1 == video_in_V_keep_V_0_ack_out) & (2'd3 == video_in_V_keep_V_0_state)) | ((1'b0 == video_in_V_keep_V_0_vld_in) & (2'd2 == video_in_V_keep_V_0_state)))) begin
            video_in_V_keep_V_0_state <= 2'd2;
        end else if ((((1'b1 == video_in_V_keep_V_0_vld_in) & (1'b0 == video_in_V_keep_V_0_ack_out) & (2'd3 == video_in_V_keep_V_0_state)) | ((1'b0 == video_in_V_keep_V_0_ack_out) & (2'd1 == video_in_V_keep_V_0_state)))) begin
            video_in_V_keep_V_0_state <= 2'd1;
        end else if ((((1'b1 == video_in_V_keep_V_0_vld_in) & (2'd2 == video_in_V_keep_V_0_state)) | ((1'b1 == video_in_V_keep_V_0_ack_out) & (2'd1 == video_in_V_keep_V_0_state)) | ((2'd3 == video_in_V_keep_V_0_state) & ~((1'b1 == video_in_V_keep_V_0_vld_in) & (1'b0 == video_in_V_keep_V_0_ack_out)) & ~((1'b0 == video_in_V_keep_V_0_vld_in) & (1'b1 == video_in_V_keep_V_0_ack_out))))) begin
            video_in_V_keep_V_0_state <= 2'd3;
        end else begin
            video_in_V_keep_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_last_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_last_V_0_ack_out) & (1'b1 == video_in_V_last_V_0_vld_out))) begin
            video_in_V_last_V_0_sel_rd <= ~video_in_V_last_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_last_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_last_V_0_vld_in) & (1'b1 == video_in_V_last_V_0_ack_in))) begin
            video_in_V_last_V_0_sel_wr <= ~video_in_V_last_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_last_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_in_V_last_V_0_vld_in) & (1'b1 == video_in_V_last_V_0_ack_out) & (2'd3 == video_in_V_last_V_0_state)) | ((1'b0 == video_in_V_last_V_0_vld_in) & (2'd2 == video_in_V_last_V_0_state)))) begin
            video_in_V_last_V_0_state <= 2'd2;
        end else if ((((1'b1 == video_in_V_last_V_0_vld_in) & (1'b0 == video_in_V_last_V_0_ack_out) & (2'd3 == video_in_V_last_V_0_state)) | ((1'b0 == video_in_V_last_V_0_ack_out) & (2'd1 == video_in_V_last_V_0_state)))) begin
            video_in_V_last_V_0_state <= 2'd1;
        end else if ((((1'b1 == video_in_V_last_V_0_vld_in) & (2'd2 == video_in_V_last_V_0_state)) | ((1'b1 == video_in_V_last_V_0_ack_out) & (2'd1 == video_in_V_last_V_0_state)) | ((2'd3 == video_in_V_last_V_0_state) & ~((1'b1 == video_in_V_last_V_0_vld_in) & (1'b0 == video_in_V_last_V_0_ack_out)) & ~((1'b0 == video_in_V_last_V_0_vld_in) & (1'b1 == video_in_V_last_V_0_ack_out))))) begin
            video_in_V_last_V_0_state <= 2'd3;
        end else begin
            video_in_V_last_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_strb_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_strb_V_0_ack_out) & (1'b1 == video_in_V_strb_V_0_vld_out))) begin
            video_in_V_strb_V_0_sel_rd <= ~video_in_V_strb_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_strb_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_strb_V_0_vld_in) & (1'b1 == video_in_V_strb_V_0_ack_in))) begin
            video_in_V_strb_V_0_sel_wr <= ~video_in_V_strb_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_strb_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_in_V_strb_V_0_vld_in) & (1'b1 == video_in_V_strb_V_0_ack_out) & (2'd3 == video_in_V_strb_V_0_state)) | ((1'b0 == video_in_V_strb_V_0_vld_in) & (2'd2 == video_in_V_strb_V_0_state)))) begin
            video_in_V_strb_V_0_state <= 2'd2;
        end else if ((((1'b1 == video_in_V_strb_V_0_vld_in) & (1'b0 == video_in_V_strb_V_0_ack_out) & (2'd3 == video_in_V_strb_V_0_state)) | ((1'b0 == video_in_V_strb_V_0_ack_out) & (2'd1 == video_in_V_strb_V_0_state)))) begin
            video_in_V_strb_V_0_state <= 2'd1;
        end else if ((((1'b1 == video_in_V_strb_V_0_vld_in) & (2'd2 == video_in_V_strb_V_0_state)) | ((1'b1 == video_in_V_strb_V_0_ack_out) & (2'd1 == video_in_V_strb_V_0_state)) | ((2'd3 == video_in_V_strb_V_0_state) & ~((1'b1 == video_in_V_strb_V_0_vld_in) & (1'b0 == video_in_V_strb_V_0_ack_out)) & ~((1'b0 == video_in_V_strb_V_0_vld_in) & (1'b1 == video_in_V_strb_V_0_ack_out))))) begin
            video_in_V_strb_V_0_state <= 2'd3;
        end else begin
            video_in_V_strb_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_user_V_0_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_user_V_0_ack_out) & (1'b1 == video_in_V_user_V_0_vld_out))) begin
            video_in_V_user_V_0_sel_rd <= ~video_in_V_user_V_0_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_user_V_0_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_in_V_user_V_0_vld_in) & (1'b1 == video_in_V_user_V_0_ack_in))) begin
            video_in_V_user_V_0_sel_wr <= ~video_in_V_user_V_0_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_in_V_user_V_0_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_in_V_user_V_0_vld_in) & (1'b1 == video_in_V_user_V_0_ack_out) & (2'd3 == video_in_V_user_V_0_state)) | ((1'b0 == video_in_V_user_V_0_vld_in) & (2'd2 == video_in_V_user_V_0_state)))) begin
            video_in_V_user_V_0_state <= 2'd2;
        end else if ((((1'b1 == video_in_V_user_V_0_vld_in) & (1'b0 == video_in_V_user_V_0_ack_out) & (2'd3 == video_in_V_user_V_0_state)) | ((1'b0 == video_in_V_user_V_0_ack_out) & (2'd1 == video_in_V_user_V_0_state)))) begin
            video_in_V_user_V_0_state <= 2'd1;
        end else if ((((1'b1 == video_in_V_user_V_0_vld_in) & (2'd2 == video_in_V_user_V_0_state)) | ((1'b1 == video_in_V_user_V_0_ack_out) & (2'd1 == video_in_V_user_V_0_state)) | ((2'd3 == video_in_V_user_V_0_state) & ~((1'b1 == video_in_V_user_V_0_vld_in) & (1'b0 == video_in_V_user_V_0_ack_out)) & ~((1'b0 == video_in_V_user_V_0_vld_in) & (1'b1 == video_in_V_user_V_0_ack_out))))) begin
            video_in_V_user_V_0_state <= 2'd3;
        end else begin
            video_in_V_user_V_0_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_data_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_data_V_1_ack_out) & (1'b1 == video_out_V_data_V_1_vld_out))) begin
            video_out_V_data_V_1_sel_rd <= ~video_out_V_data_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_data_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_data_V_1_vld_in) & (1'b1 == video_out_V_data_V_1_ack_in))) begin
            video_out_V_data_V_1_sel_wr <= ~video_out_V_data_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_data_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_out_V_data_V_1_vld_in) & (1'b1 == video_out_V_data_V_1_ack_out) & (2'd3 == video_out_V_data_V_1_state)) | ((1'b0 == video_out_V_data_V_1_vld_in) & (2'd2 == video_out_V_data_V_1_state)))) begin
            video_out_V_data_V_1_state <= 2'd2;
        end else if ((((1'b1 == video_out_V_data_V_1_vld_in) & (1'b0 == video_out_V_data_V_1_ack_out) & (2'd3 == video_out_V_data_V_1_state)) | ((1'b0 == video_out_V_data_V_1_ack_out) & (2'd1 == video_out_V_data_V_1_state)))) begin
            video_out_V_data_V_1_state <= 2'd1;
        end else if ((((1'b1 == video_out_V_data_V_1_vld_in) & (2'd2 == video_out_V_data_V_1_state)) | ((1'b1 == video_out_V_data_V_1_ack_out) & (2'd1 == video_out_V_data_V_1_state)) | ((2'd3 == video_out_V_data_V_1_state) & ~((1'b1 == video_out_V_data_V_1_vld_in) & (1'b0 == video_out_V_data_V_1_ack_out)) & ~((1'b0 == video_out_V_data_V_1_vld_in) & (1'b1 == video_out_V_data_V_1_ack_out))))) begin
            video_out_V_data_V_1_state <= 2'd3;
        end else begin
            video_out_V_data_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_keep_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_keep_V_1_ack_out) & (1'b1 == video_out_V_keep_V_1_vld_out))) begin
            video_out_V_keep_V_1_sel_rd <= ~video_out_V_keep_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_keep_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_keep_V_1_vld_in) & (1'b1 == video_out_V_keep_V_1_ack_in))) begin
            video_out_V_keep_V_1_sel_wr <= ~video_out_V_keep_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_keep_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_out_V_keep_V_1_vld_in) & (1'b1 == video_out_V_keep_V_1_ack_out) & (2'd3 == video_out_V_keep_V_1_state)) | ((1'b0 == video_out_V_keep_V_1_vld_in) & (2'd2 == video_out_V_keep_V_1_state)))) begin
            video_out_V_keep_V_1_state <= 2'd2;
        end else if ((((1'b1 == video_out_V_keep_V_1_vld_in) & (1'b0 == video_out_V_keep_V_1_ack_out) & (2'd3 == video_out_V_keep_V_1_state)) | ((1'b0 == video_out_V_keep_V_1_ack_out) & (2'd1 == video_out_V_keep_V_1_state)))) begin
            video_out_V_keep_V_1_state <= 2'd1;
        end else if ((((1'b1 == video_out_V_keep_V_1_vld_in) & (2'd2 == video_out_V_keep_V_1_state)) | ((1'b1 == video_out_V_keep_V_1_ack_out) & (2'd1 == video_out_V_keep_V_1_state)) | ((2'd3 == video_out_V_keep_V_1_state) & ~((1'b1 == video_out_V_keep_V_1_vld_in) & (1'b0 == video_out_V_keep_V_1_ack_out)) & ~((1'b0 == video_out_V_keep_V_1_vld_in) & (1'b1 == video_out_V_keep_V_1_ack_out))))) begin
            video_out_V_keep_V_1_state <= 2'd3;
        end else begin
            video_out_V_keep_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_last_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_last_V_1_ack_out) & (1'b1 == video_out_V_last_V_1_vld_out))) begin
            video_out_V_last_V_1_sel_rd <= ~video_out_V_last_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_last_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_last_V_1_vld_in) & (1'b1 == video_out_V_last_V_1_ack_in))) begin
            video_out_V_last_V_1_sel_wr <= ~video_out_V_last_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_last_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_out_V_last_V_1_vld_in) & (1'b1 == video_out_V_last_V_1_ack_out) & (2'd3 == video_out_V_last_V_1_state)) | ((1'b0 == video_out_V_last_V_1_vld_in) & (2'd2 == video_out_V_last_V_1_state)))) begin
            video_out_V_last_V_1_state <= 2'd2;
        end else if ((((1'b1 == video_out_V_last_V_1_vld_in) & (1'b0 == video_out_V_last_V_1_ack_out) & (2'd3 == video_out_V_last_V_1_state)) | ((1'b0 == video_out_V_last_V_1_ack_out) & (2'd1 == video_out_V_last_V_1_state)))) begin
            video_out_V_last_V_1_state <= 2'd1;
        end else if ((((1'b1 == video_out_V_last_V_1_vld_in) & (2'd2 == video_out_V_last_V_1_state)) | ((1'b1 == video_out_V_last_V_1_ack_out) & (2'd1 == video_out_V_last_V_1_state)) | ((2'd3 == video_out_V_last_V_1_state) & ~((1'b1 == video_out_V_last_V_1_vld_in) & (1'b0 == video_out_V_last_V_1_ack_out)) & ~((1'b0 == video_out_V_last_V_1_vld_in) & (1'b1 == video_out_V_last_V_1_ack_out))))) begin
            video_out_V_last_V_1_state <= 2'd3;
        end else begin
            video_out_V_last_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_strb_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_strb_V_1_ack_out) & (1'b1 == video_out_V_strb_V_1_vld_out))) begin
            video_out_V_strb_V_1_sel_rd <= ~video_out_V_strb_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_strb_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_strb_V_1_vld_in) & (1'b1 == video_out_V_strb_V_1_ack_in))) begin
            video_out_V_strb_V_1_sel_wr <= ~video_out_V_strb_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_strb_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_out_V_strb_V_1_vld_in) & (1'b1 == video_out_V_strb_V_1_ack_out) & (2'd3 == video_out_V_strb_V_1_state)) | ((1'b0 == video_out_V_strb_V_1_vld_in) & (2'd2 == video_out_V_strb_V_1_state)))) begin
            video_out_V_strb_V_1_state <= 2'd2;
        end else if ((((1'b1 == video_out_V_strb_V_1_vld_in) & (1'b0 == video_out_V_strb_V_1_ack_out) & (2'd3 == video_out_V_strb_V_1_state)) | ((1'b0 == video_out_V_strb_V_1_ack_out) & (2'd1 == video_out_V_strb_V_1_state)))) begin
            video_out_V_strb_V_1_state <= 2'd1;
        end else if ((((1'b1 == video_out_V_strb_V_1_vld_in) & (2'd2 == video_out_V_strb_V_1_state)) | ((1'b1 == video_out_V_strb_V_1_ack_out) & (2'd1 == video_out_V_strb_V_1_state)) | ((2'd3 == video_out_V_strb_V_1_state) & ~((1'b1 == video_out_V_strb_V_1_vld_in) & (1'b0 == video_out_V_strb_V_1_ack_out)) & ~((1'b0 == video_out_V_strb_V_1_vld_in) & (1'b1 == video_out_V_strb_V_1_ack_out))))) begin
            video_out_V_strb_V_1_state <= 2'd3;
        end else begin
            video_out_V_strb_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_user_V_1_sel_rd <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_user_V_1_ack_out) & (1'b1 == video_out_V_user_V_1_vld_out))) begin
            video_out_V_user_V_1_sel_rd <= ~video_out_V_user_V_1_sel_rd;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_user_V_1_sel_wr <= 1'b0;
    end else begin
        if (((1'b1 == video_out_V_user_V_1_vld_in) & (1'b1 == video_out_V_user_V_1_ack_in))) begin
            video_out_V_user_V_1_sel_wr <= ~video_out_V_user_V_1_sel_wr;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst_n_inv == 1'b1) begin
        video_out_V_user_V_1_state <= 2'd0;
    end else begin
        if ((((1'b0 == video_out_V_user_V_1_vld_in) & (1'b1 == video_out_V_user_V_1_ack_out) & (2'd3 == video_out_V_user_V_1_state)) | ((1'b0 == video_out_V_user_V_1_vld_in) & (2'd2 == video_out_V_user_V_1_state)))) begin
            video_out_V_user_V_1_state <= 2'd2;
        end else if ((((1'b1 == video_out_V_user_V_1_vld_in) & (1'b0 == video_out_V_user_V_1_ack_out) & (2'd3 == video_out_V_user_V_1_state)) | ((1'b0 == video_out_V_user_V_1_ack_out) & (2'd1 == video_out_V_user_V_1_state)))) begin
            video_out_V_user_V_1_state <= 2'd1;
        end else if ((((1'b1 == video_out_V_user_V_1_vld_in) & (2'd2 == video_out_V_user_V_1_state)) | ((1'b1 == video_out_V_user_V_1_ack_out) & (2'd1 == video_out_V_user_V_1_state)) | ((2'd3 == video_out_V_user_V_1_state) & ~((1'b1 == video_out_V_user_V_1_vld_in) & (1'b0 == video_out_V_user_V_1_ack_out)) & ~((1'b0 == video_out_V_user_V_1_vld_in) & (1'b1 == video_out_V_user_V_1_ack_out))))) begin
            video_out_V_user_V_1_state <= 2'd3;
        end else begin
            video_out_V_user_V_1_state <= 2'd2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter0) & (1'd0 == exitcond_fu_133_p2))) begin
        i_reg_117 <= i_1_fu_139_p2;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        i_reg_117 <= 21'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        leftover_V_fu_80 <= leftover_V_1_fu_200_p3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        leftover_V_fu_80 <= 8'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        ap_reg_pp0_iter1_exitcond_reg_237 <= exitcond_reg_237;
        exitcond_reg_237 <= exitcond_fu_133_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (ap_block_pp0_stage0_flag00011001 == 1'b0) & (1'd0 == exitcond_fu_133_p2))) begin
        tmp_reg_246 <= tmp_fu_145_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_data_V_0_load_A)) begin
        video_in_V_data_V_0_payload_A <= video_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_data_V_0_load_B)) begin
        video_in_V_data_V_0_payload_B <= video_in_TDATA;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_keep_V_0_load_A)) begin
        video_in_V_keep_V_0_payload_A <= video_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_keep_V_0_load_B)) begin
        video_in_V_keep_V_0_payload_B <= video_in_TKEEP;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_last_V_0_load_A)) begin
        video_in_V_last_V_0_payload_A <= video_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_last_V_0_load_B)) begin
        video_in_V_last_V_0_payload_B <= video_in_TLAST;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_strb_V_0_load_A)) begin
        video_in_V_strb_V_0_payload_A <= video_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_strb_V_0_load_B)) begin
        video_in_V_strb_V_0_payload_B <= video_in_TSTRB;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_user_V_0_load_A)) begin
        video_in_V_user_V_0_payload_A <= video_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_in_V_user_V_0_load_B)) begin
        video_in_V_user_V_0_payload_B <= video_in_TUSER;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_data_V_1_load_A)) begin
        video_out_V_data_V_1_payload_A <= pixOut_3_fu_207_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_data_V_1_load_B)) begin
        video_out_V_data_V_1_payload_B <= pixOut_3_fu_207_p3;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_keep_V_1_load_A)) begin
        video_out_V_keep_V_1_payload_A <= tmp_keep_V_1_fu_215_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_keep_V_1_load_B)) begin
        video_out_V_keep_V_1_payload_B <= tmp_keep_V_1_fu_215_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_last_V_1_load_A)) begin
        video_out_V_last_V_1_payload_A <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_last_V_1_load_B)) begin
        video_out_V_last_V_1_payload_B <= video_in_V_last_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_strb_V_1_load_A)) begin
        video_out_V_strb_V_1_payload_A <= tmp_strb_V_1_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_strb_V_1_load_B)) begin
        video_out_V_strb_V_1_payload_B <= tmp_strb_V_1_fu_220_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_user_V_1_load_A)) begin
        video_out_V_user_V_1_payload_A <= video_in_V_user_V_0_data_out;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == video_out_V_user_V_1_load_B)) begin
        video_out_V_user_V_1_payload_B <= video_in_V_user_V_0_data_out;
    end
end

always @ (*) begin
    if ((1'd1 == exitcond_fu_133_p2)) begin
        ap_condition_pp0_exit_iter0_state3 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state3 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_enable_reg_pp0_iter0) & (1'b0 == ap_enable_reg_pp0_iter1) & (1'b0 == ap_enable_reg_pp0_iter2))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == exitcond_reg_237))) begin
        video_in_TDATA_blk_n = video_in_V_data_V_0_state[1'd0];
    end else begin
        video_in_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_in_V_data_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_data_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_data_V_0_sel)) begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_B;
    end else begin
        video_in_V_data_V_0_data_out = video_in_V_data_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_in_V_keep_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_keep_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_keep_V_0_sel)) begin
        video_in_V_keep_V_0_data_out = video_in_V_keep_V_0_payload_B;
    end else begin
        video_in_V_keep_V_0_data_out = video_in_V_keep_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_in_V_last_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_last_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_last_V_0_sel)) begin
        video_in_V_last_V_0_data_out = video_in_V_last_V_0_payload_B;
    end else begin
        video_in_V_last_V_0_data_out = video_in_V_last_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_in_V_strb_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_strb_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_strb_V_0_sel)) begin
        video_in_V_strb_V_0_data_out = video_in_V_strb_V_0_payload_B;
    end else begin
        video_in_V_strb_V_0_data_out = video_in_V_strb_V_0_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_in_V_user_V_0_ack_out = 1'b1;
    end else begin
        video_in_V_user_V_0_ack_out = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_in_V_user_V_0_sel)) begin
        video_in_V_user_V_0_data_out = video_in_V_user_V_0_payload_B;
    end else begin
        video_in_V_user_V_0_data_out = video_in_V_user_V_0_payload_A;
    end
end

always @ (*) begin
    if ((((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'd0 == exitcond_reg_237)) | ((ap_block_pp0_stage0_flag00000000 == 1'b0) & (1'b1 == ap_enable_reg_pp0_iter2) & (1'd0 == ap_reg_pp0_iter1_exitcond_reg_237)))) begin
        video_out_TDATA_blk_n = video_out_V_data_V_1_state[1'd1];
    end else begin
        video_out_TDATA_blk_n = 1'b1;
    end
end

always @ (*) begin
    if ((1'b1 == video_out_V_data_V_1_sel)) begin
        video_out_V_data_V_1_data_out = video_out_V_data_V_1_payload_B;
    end else begin
        video_out_V_data_V_1_data_out = video_out_V_data_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_out_V_data_V_1_vld_in = 1'b1;
    end else begin
        video_out_V_data_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_out_V_keep_V_1_sel)) begin
        video_out_V_keep_V_1_data_out = video_out_V_keep_V_1_payload_B;
    end else begin
        video_out_V_keep_V_1_data_out = video_out_V_keep_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_out_V_keep_V_1_vld_in = 1'b1;
    end else begin
        video_out_V_keep_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_out_V_last_V_1_sel)) begin
        video_out_V_last_V_1_data_out = video_out_V_last_V_1_payload_B;
    end else begin
        video_out_V_last_V_1_data_out = video_out_V_last_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_out_V_last_V_1_vld_in = 1'b1;
    end else begin
        video_out_V_last_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_out_V_strb_V_1_sel)) begin
        video_out_V_strb_V_1_data_out = video_out_V_strb_V_1_payload_B;
    end else begin
        video_out_V_strb_V_1_data_out = video_out_V_strb_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_out_V_strb_V_1_vld_in = 1'b1;
    end else begin
        video_out_V_strb_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == video_out_V_user_V_1_sel)) begin
        video_out_V_user_V_1_data_out = video_out_V_user_V_1_payload_B;
    end else begin
        video_out_V_user_V_1_data_out = video_out_V_user_V_1_payload_A;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_pp0_stage0) & (1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (ap_block_pp0_stage0_flag00011001 == 1'b0))) begin
        video_out_V_user_V_1_vld_in = 1'b1;
    end else begin
        video_out_V_user_V_1_vld_in = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if ((~((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) & ~((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_fu_133_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if ((((1'b1 == ap_enable_reg_pp0_iter2) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0)) | ((1'b1 == ap_enable_reg_pp0_iter0) & (ap_block_pp0_stage0_flag00011011 == 1'b0) & (1'd1 == exitcond_fu_133_p2) & (ap_enable_reg_pp0_iter1 == 1'b0)))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state2;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Cr_V_fu_178_p4 = {{video_in_V_data_V_0_data_out[23:16]}};

assign Y_V_fu_174_p1 = video_in_V_data_V_0_data_out[7:0];

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_block_pp0_stage0_flag00000000 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_flag00001001 = ((1'b1 == ap_enable_reg_pp0_iter1) & (1'd0 == exitcond_reg_237) & (1'b0 == video_in_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011001 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd0 == exitcond_reg_237) & (1'b0 == video_in_V_data_V_0_vld_out)) | (1'b1 == ap_block_state4_io))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)));
end

always @ (*) begin
    ap_block_pp0_stage0_flag00011011 = (((1'b1 == ap_enable_reg_pp0_iter1) & (((1'd0 == exitcond_reg_237) & (1'b0 == video_in_V_data_V_0_vld_out)) | (1'b1 == ap_block_state4_io))) | ((1'b1 == ap_enable_reg_pp0_iter2) & (1'b1 == ap_block_state5_io)));
end

assign ap_block_state3_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state4_io = ((1'd0 == exitcond_reg_237) & (1'b0 == video_out_V_data_V_1_ack_in));
end

always @ (*) begin
    ap_block_state4_pp0_stage0_iter1 = ((1'd0 == exitcond_reg_237) & (1'b0 == video_in_V_data_V_0_vld_out));
end

always @ (*) begin
    ap_block_state5_io = ((1'd0 == ap_reg_pp0_iter1_exitcond_reg_237) & (1'b0 == video_out_V_data_V_1_ack_in));
end

assign ap_block_state5_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

always @ (*) begin
    ap_rst_n_inv = ~ap_rst_n;
end

assign exitcond_fu_133_p2 = ((i_reg_117 == 21'd2073600) ? 1'b1 : 1'b0);

assign i_1_fu_139_p2 = (i_reg_117 + 21'd1);

assign leftover_V_1_fu_200_p3 = ((tmp_reg_246[0:0] === 1'b1) ? leftover_V_fu_80 : Cr_V_fu_178_p4);

assign pixOut_1_fu_192_p3 = {{leftover_V_fu_80}, {Y_V_fu_174_p1}};

assign pixOut_3_fu_207_p3 = ((tmp_reg_246[0:0] === 1'b1) ? pixOut_1_fu_192_p3 : pixOut_fu_188_p1);

assign pixOut_fu_188_p1 = video_in_V_data_V_0_data_out[15:0];

assign tmp_fu_145_p1 = i_reg_117[0:0];

assign tmp_keep_V_1_fu_215_p1 = video_in_V_keep_V_0_data_out[1:0];

assign tmp_strb_V_1_fu_220_p1 = video_in_V_strb_V_0_data_out[1:0];

assign video_in_TREADY = video_in_V_last_V_0_state[1'd1];

assign video_in_V_data_V_0_ack_in = video_in_V_data_V_0_state[1'd1];

assign video_in_V_data_V_0_load_A = (video_in_V_data_V_0_state_cmp_full & ~video_in_V_data_V_0_sel_wr);

assign video_in_V_data_V_0_load_B = (video_in_V_data_V_0_sel_wr & video_in_V_data_V_0_state_cmp_full);

assign video_in_V_data_V_0_sel = video_in_V_data_V_0_sel_rd;

assign video_in_V_data_V_0_state_cmp_full = ((video_in_V_data_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_data_V_0_vld_in = video_in_TVALID;

assign video_in_V_data_V_0_vld_out = video_in_V_data_V_0_state[1'd0];

assign video_in_V_keep_V_0_ack_in = video_in_V_keep_V_0_state[1'd1];

assign video_in_V_keep_V_0_load_A = (video_in_V_keep_V_0_state_cmp_full & ~video_in_V_keep_V_0_sel_wr);

assign video_in_V_keep_V_0_load_B = (video_in_V_keep_V_0_sel_wr & video_in_V_keep_V_0_state_cmp_full);

assign video_in_V_keep_V_0_sel = video_in_V_keep_V_0_sel_rd;

assign video_in_V_keep_V_0_state_cmp_full = ((video_in_V_keep_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_keep_V_0_vld_in = video_in_TVALID;

assign video_in_V_keep_V_0_vld_out = video_in_V_keep_V_0_state[1'd0];

assign video_in_V_last_V_0_ack_in = video_in_V_last_V_0_state[1'd1];

assign video_in_V_last_V_0_load_A = (video_in_V_last_V_0_state_cmp_full & ~video_in_V_last_V_0_sel_wr);

assign video_in_V_last_V_0_load_B = (video_in_V_last_V_0_sel_wr & video_in_V_last_V_0_state_cmp_full);

assign video_in_V_last_V_0_sel = video_in_V_last_V_0_sel_rd;

assign video_in_V_last_V_0_state_cmp_full = ((video_in_V_last_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_last_V_0_vld_in = video_in_TVALID;

assign video_in_V_last_V_0_vld_out = video_in_V_last_V_0_state[1'd0];

assign video_in_V_strb_V_0_ack_in = video_in_V_strb_V_0_state[1'd1];

assign video_in_V_strb_V_0_load_A = (video_in_V_strb_V_0_state_cmp_full & ~video_in_V_strb_V_0_sel_wr);

assign video_in_V_strb_V_0_load_B = (video_in_V_strb_V_0_sel_wr & video_in_V_strb_V_0_state_cmp_full);

assign video_in_V_strb_V_0_sel = video_in_V_strb_V_0_sel_rd;

assign video_in_V_strb_V_0_state_cmp_full = ((video_in_V_strb_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_strb_V_0_vld_in = video_in_TVALID;

assign video_in_V_strb_V_0_vld_out = video_in_V_strb_V_0_state[1'd0];

assign video_in_V_user_V_0_ack_in = video_in_V_user_V_0_state[1'd1];

assign video_in_V_user_V_0_load_A = (video_in_V_user_V_0_state_cmp_full & ~video_in_V_user_V_0_sel_wr);

assign video_in_V_user_V_0_load_B = (video_in_V_user_V_0_sel_wr & video_in_V_user_V_0_state_cmp_full);

assign video_in_V_user_V_0_sel = video_in_V_user_V_0_sel_rd;

assign video_in_V_user_V_0_state_cmp_full = ((video_in_V_user_V_0_state != 2'd1) ? 1'b1 : 1'b0);

assign video_in_V_user_V_0_vld_in = video_in_TVALID;

assign video_in_V_user_V_0_vld_out = video_in_V_user_V_0_state[1'd0];

assign video_out_TDATA = video_out_V_data_V_1_data_out;

assign video_out_TKEEP = video_out_V_keep_V_1_data_out;

assign video_out_TLAST = video_out_V_last_V_1_data_out;

assign video_out_TSTRB = video_out_V_strb_V_1_data_out;

assign video_out_TUSER = video_out_V_user_V_1_data_out;

assign video_out_TVALID = video_out_V_last_V_1_state[1'd0];

assign video_out_V_data_V_1_ack_in = video_out_V_data_V_1_state[1'd1];

assign video_out_V_data_V_1_ack_out = video_out_TREADY;

assign video_out_V_data_V_1_load_A = (video_out_V_data_V_1_state_cmp_full & ~video_out_V_data_V_1_sel_wr);

assign video_out_V_data_V_1_load_B = (video_out_V_data_V_1_sel_wr & video_out_V_data_V_1_state_cmp_full);

assign video_out_V_data_V_1_sel = video_out_V_data_V_1_sel_rd;

assign video_out_V_data_V_1_state_cmp_full = ((video_out_V_data_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign video_out_V_data_V_1_vld_out = video_out_V_data_V_1_state[1'd0];

assign video_out_V_keep_V_1_ack_in = video_out_V_keep_V_1_state[1'd1];

assign video_out_V_keep_V_1_ack_out = video_out_TREADY;

assign video_out_V_keep_V_1_load_A = (video_out_V_keep_V_1_state_cmp_full & ~video_out_V_keep_V_1_sel_wr);

assign video_out_V_keep_V_1_load_B = (video_out_V_keep_V_1_sel_wr & video_out_V_keep_V_1_state_cmp_full);

assign video_out_V_keep_V_1_sel = video_out_V_keep_V_1_sel_rd;

assign video_out_V_keep_V_1_state_cmp_full = ((video_out_V_keep_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign video_out_V_keep_V_1_vld_out = video_out_V_keep_V_1_state[1'd0];

assign video_out_V_last_V_1_ack_in = video_out_V_last_V_1_state[1'd1];

assign video_out_V_last_V_1_ack_out = video_out_TREADY;

assign video_out_V_last_V_1_load_A = (video_out_V_last_V_1_state_cmp_full & ~video_out_V_last_V_1_sel_wr);

assign video_out_V_last_V_1_load_B = (video_out_V_last_V_1_sel_wr & video_out_V_last_V_1_state_cmp_full);

assign video_out_V_last_V_1_sel = video_out_V_last_V_1_sel_rd;

assign video_out_V_last_V_1_state_cmp_full = ((video_out_V_last_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign video_out_V_last_V_1_vld_out = video_out_V_last_V_1_state[1'd0];

assign video_out_V_strb_V_1_ack_in = video_out_V_strb_V_1_state[1'd1];

assign video_out_V_strb_V_1_ack_out = video_out_TREADY;

assign video_out_V_strb_V_1_load_A = (video_out_V_strb_V_1_state_cmp_full & ~video_out_V_strb_V_1_sel_wr);

assign video_out_V_strb_V_1_load_B = (video_out_V_strb_V_1_sel_wr & video_out_V_strb_V_1_state_cmp_full);

assign video_out_V_strb_V_1_sel = video_out_V_strb_V_1_sel_rd;

assign video_out_V_strb_V_1_state_cmp_full = ((video_out_V_strb_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign video_out_V_strb_V_1_vld_out = video_out_V_strb_V_1_state[1'd0];

assign video_out_V_user_V_1_ack_in = video_out_V_user_V_1_state[1'd1];

assign video_out_V_user_V_1_ack_out = video_out_TREADY;

assign video_out_V_user_V_1_load_A = (video_out_V_user_V_1_state_cmp_full & ~video_out_V_user_V_1_sel_wr);

assign video_out_V_user_V_1_load_B = (video_out_V_user_V_1_sel_wr & video_out_V_user_V_1_state_cmp_full);

assign video_out_V_user_V_1_sel = video_out_V_user_V_1_sel_rd;

assign video_out_V_user_V_1_state_cmp_full = ((video_out_V_user_V_1_state != 2'd1) ? 1'b1 : 1'b0);

assign video_out_V_user_V_1_vld_out = video_out_V_user_V_1_state[1'd0];

endmodule //CrappyButFreeChromaResampler
